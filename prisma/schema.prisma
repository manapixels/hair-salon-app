// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  CUSTOMER
  ADMIN
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum RetentionMessageType {
  FEEDBACK_REQUEST
  REBOOKING_NUDGE
  WIN_BACK
}

model User {
  id            String  @id @default(cuid())
  name          String
  email         String  @unique
  password      String?
  role          Role    @default(CUSTOMER)
  authProvider  String?
  telegramId    Int?    @unique
  whatsappPhone String? @unique
  avatar        String?

  // Retention tracking
  lastVisitDate            DateTime?
  totalVisits              Int       @default(0)
  lastRetentionMessageSent DateTime?

  appointments      Appointment[]
  feedback          Feedback[]
  retentionMessages RetentionMessage[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([whatsappPhone])
  @@map("users")
}

model Service {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  price       Int
  duration    Int // in minutes
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("services")
}

model Stylist {
  id           String       @id @default(cuid())
  name         String
  email        String       @unique
  bio          String?
  avatar       String?
  specialties  Json         // Array of service IDs this stylist can perform
  workingHours Json         // Working hours for each day of week
  isActive     Boolean      @default(true)
  appointments Appointment[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("stylists")
}

model Appointment {
  id              String   @id @default(cuid())
  date            DateTime
  time            String
  services        Json     // Array of services
  stylistId       String?  // The assigned stylist
  stylist         Stylist? @relation(fields: [stylistId], references: [id], onDelete: SetNull)
  customerName    String
  customerEmail   String
  totalPrice      Int
  totalDuration   Int
  calendarEventId String?  // Google Calendar event ID
  userId          String?
  user            User?    @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Status tracking
  status       AppointmentStatus @default(SCHEDULED)
  completedAt  DateTime?
  feedbackSent Boolean           @default(false)

  feedback  Feedback?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("appointments")
}

model AdminSettings {
  id           Int    @id @default(autoincrement())
  openingTime  String @default("09:00")
  closingTime  String @default("18:00")
  blockedSlots Json   @default("{}")
  updatedAt    DateTime @updatedAt

  @@map("admin_settings")
}

model Feedback {
  id            String      @id @default(cuid())
  appointmentId String      @unique
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  userId        String
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  rating        Int         // 1-5 stars
  comment       String?
  createdAt     DateTime    @default(now())

  @@map("feedback")
}

model RetentionMessage {
  id                 String                 @id @default(cuid())
  userId             String
  user               User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  messageType        RetentionMessageType
  daysSinceLastVisit Int
  sentAt             DateTime               @default(now())
  deliveryStatus     String                 @default("PENDING") // SENT/FAILED/REPLIED
  deliveryError      String?

  @@map("retention_messages")
}